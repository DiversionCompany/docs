openapi: 3.0.3
info:
  title: Diversion Core API
  description: Definition of the Core API used to access low-level functionality of Diversion
  version: 0.2.0
servers:
  - url: https://api.diversion.dev/v0
    description: Base endpoint

paths:
  /auth/complete:
    get:
      operationId: src.handlers.auth.complete
      description: Callback URL for sign-ins
      parameters:
        - in: query
          required: false
          name: code
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - in: query
          required: true
          name: state
          schema:
            type: string
            minLength: 43
            maxLength: 256
        - in: query
          required: false
          name: error_description
          schema:
            type: string
      responses:
        '200':
          description: Sign-in flow completed
          content:
            text/html:
              schema:
                type: string
      tags:
        - Authentication
  /auth/poll:
    get:
      operationId: src.handlers.auth.poll
      description: Polling endpoint for the CLI to wait for the user to complete the sign-in flow
      parameters:
        - in: query
          required: true
          name: code_challenge
          schema:
            type: string
            minLength: 43
            maxLength: 128
      responses:
        202:
          description: Not yet completed
        302:
          description: Sign-in completed, go to redirected address to fetch the code
          headers:
            Location:
              required: true
              schema:
                type: string
                minLength: 1
                maxLength: 256
        404:
          description: Provided `code_challenge` not found. The user might have not yet started the sign-in flow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Authentication
  /auth/fetch_code:
    get:
      operationId: src.handlers.auth.fetch_code
      description: Retrieve the code grant in exchange for the correct code challenge and verifier
      parameters:
        - in: query
          required: true
          name: code_challenge
          schema:
            type: string
            minLength: 43
            maxLength: 128
        - in: query
          required: true
          name: code_verifier
          schema:
            type: string
            minLength: 43
            maxLength: 128
      responses:
        200:
          description: Code challenge and verifier are correct, code grant returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Authentication
  /auth/test:
    get:
      operationId: src.handlers.auth.test_token
      summary: Test token validity, repo write access
      description: Validate the given auth token, test write access to specified repo
      parameters:
        - in: query
          required: false
          name: repo_id
          schema:
            type: string
            minLength: 9
            maxLength: 128
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Authentication
  /repos:
    post:
      operationId: src.handlersv2.repo.post
      summary: Create a repo
      description: Create an empty repo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/NewRepo'
                - type: object
                  properties:
                    branchless:
                      type: boolean
      responses:
        '201':
          description: The newly created repo object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
        '409':
          description: Repo with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Management
    get:
      operationId: src.handlersv2.repo.list_all
      summary: List user's repositories
      description: Get a list of repositories accessibly by the authenticated user
      parameters:
        - in: query
          name: owned
          description: >
            If specified, filters repositories by ownership of the authenticated user.
            True would mean only repos they own will be returned.
            False would mean only repos they collaborate on will be returned.
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/RepoList'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Management
  /repos/{repo_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.repo.get
      summary: Get details of an existing repo.
      description: Get details of an existing repo.
      responses:
        '200':
          description: Repo object with the requested identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
    delete:
      operationId: src.handlersv2.repo.delete
      summary: Delete a repo.
      description: >-
        Delete a repo. All files, workspaces, commits, branches permissions etc. associated with the
        repo will be deleted.
      responses:
        '202':
          description: Repo deletion started asynchronously.
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
  /repos/{repo_id}/import:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    post:
      operationId: src.handlers.integrations.git_import.import_in_background
      summary: Import a Git repo into this Diversion repo
      description: >-
        Import a Git repo with all history from a Git URL.
        `repo_id` must have no commits and no branches, or be already marked as synced with the same `git_url`.
        The git repo URL must have http credentials embedded or otherwise hosted on Github and the owner has the Diversion Github app integration set up.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitRepoImport'
      responses:
        '202':
          description: Import started asynchronously. Poll the repo until it shows a default branch.
        '409':
          description: Repo is not empty or is already synced with another URL.
          $ref: '#/components/responses/Error'
        '422':
          description: Repo credentials are not set and therefore it cannot be imported.
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
  /repos/import/check:
    post:
      operationId: src.handlers.integrations.git_import.import_verify_url
      summary: Check if a git repo could be imported to Diversion
      description: >-
        The git repo URL must have http credentials embedded or otherwise hosted on Github and the owner has the Diversion Github app integration set up.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitRepoImport'
      responses:
        '204':
          description: Git repo can be imported.
        '422':
          description: Repo credentials are not set and therefore it cannot be imported.
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Repository Manipulation
  /repos/{repo_id}/sync:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    post:
      operationId: src.handlers.integrations.github.handle_repo_github_webhook
      summary: Sync a Git repo to this Diversion repo
      description: Sync all history from Git. The repo must already be associated with a Git repo (see import).
      responses:
        '202':
          description: Sync started asynchronously.
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Repository Manipulation
  /repos/{repo_id}/commits:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.commit.list_all
      description: Get a list of commits
      parameters:
        - in: query
          name: ref_ids
          description: >
            If specified, filters commit list to start with specified ref IDs (branches, workspaces etc.),
            otherwise return commits accessible from all branches.
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageSkip'
        - $ref: '#/components/parameters/PageQuery'
      responses:
        '200':
          $ref: '#/components/responses/CommitList'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Commit Manipulation
  /repos/{repo_id}/commits/bulk:
    get:
      operationId: src.handlersv2.commit.get_bulk
      description: Get bulk details of commits by their IDs
      parameters:
        - $ref: '#/components/parameters/RepoParam'
        - in: query
          name: commit_ids
          description: >
            List of commit IDs to include
          required: true
          schema:
            type: array
            minItems: 1
            items:
              type: string
              description: A commit ID
              example: dv.commit.350e1bc3-52dc-4659-9817-7ce8f3fdf628
              minLength: 3
              maxLength: 128
      responses:
        '200':
          $ref: '#/components/responses/CommitsById'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Repository Commit Manipulation
  /repos/{repo_id}/commits/{commit_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/CommitParam'
    get:
      operationId: src.handlersv2.commit.get
      description: Get details of a specific commit
      responses:
        '200':
          $ref: '#/components/responses/Commit'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Repository Commit Manipulation
  /repos/{repo_id}/workspaces:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    post:
      operationId: src.handlersv2.workspace.create_workspace
      summary: Create a workspace
      description: Create a new workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewWorkspace'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '409':
          description: Workspace with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation
    get:
      operationId: src.handlersv2.workspace.list_all_workspaces
      description: List user's workspaces
      responses:
        '200':
          $ref: '#/components/responses/WorkspaceList'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation
  /repos/{repo_id}/workspaces/{workspace_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    get:
      operationId: src.handlersv2.workspace.get_workspace
      description: Get a workspace object details
      responses:
        '200':
          description: Workspace details returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation
  /repos/{repo_id}/workspaces/{workspace_id}/rename:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    post:
      operationId: src.handlersv2.workspace.rename_workspace
      summary: Update workspace name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceRename'
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        '409':
          description: Workspace with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation
  /repos/{repo_id}/workspaces/{workspace_id}/checkout:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    post:
      operationId: src.handlersv2.workspace.checkout
      summary: Workspace checkout ref
      description: >-
        Set the workspace to follow a different branch or commit (checkout).
        Currently supports only moving to a branch with an identical commit as the workspace's current branch,
        or moving to any branch/commit if the workspace has no working changes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCheckout'
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        '409':
          $ref: '#/components/responses/FailedDueToPendingChanges'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation
  /repos/{repo_id}/workspaces/{workspace_id}/updates:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
      - $ref: '#/components/parameters/ClientIDParam'
    get:
      operationId: src.handlersv2.workspace.get_workspace_updates
      summary: Get updates needed to be applied by the client to this workspace
      parameters:
        - in: query
          name: from_ordinal_id
          required: true
          description: Returns all change history above this ordinal ID.
          schema:
            $ref: '#/components/schemas/WorkspaceJournalOrdinalId'
      responses:
        '200':
          description: The changes made to this workspace since the commit it's based upon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUpdates'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation

  /repos/{repo_id}/workspaces/{workspace_id}/status:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    get:
      operationId: src.handlersv2.workspace.get_status
      summary: Get status of changes in workspace
      parameters:
        - $ref: '#/components/parameters/DetailWorkspaceStatusItems'
        - $ref: '#/components/parameters/FileEntriesLimit'
        - $ref: '#/components/parameters/FileWalkRecurseParam'
        - $ref: '#/components/parameters/PathPrefixParam'
      responses:
        '200':
          description: The changes made to this workspace since the commit it's based upon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceStatus'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation

  /repos/{repo_id}/workspaces/{workspace_id}/reset:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    post:
      operationId: src.handlersv2.workspace.reset
      summary: Reset changes in workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                all:
                  type: boolean
                paths:
                  $ref: '#/components/schemas/PathsList'
      responses:
        '200':
          description: The updated status of the workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetStatus'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation

  /repos/{repo_id}/workspaces/{workspace_id}/forward:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    post:
      operationId: src.handlersv2.workspace.forward_workspace
      summary: Merge base branch into workspace
      responses:
        '204':
          description: Base ref is already up to date with the other ref, no action was made
          $ref: '#/components/responses/OKEmpty'
        '200':
          description: The merge into a workspace was completed successfully
          $ref: '#/components/responses/OKEmpty'
        '202':
          description: >-
            The merge is in progress.
            It has merge conflicts requiring active input from the user for conflict resolution.
            The response contains a merge ID, which can be used for querying /repos/{repo_id}/merges/{merge_id}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MergeId"
        '412':
          description: Workspace is detached
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation

  /repos/{repo_id}/workspaces/{workspace_id}/commit:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    post:
      operationId: src.handlersv2.workspace.commit_workspace
      description: Commit workspace to base branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
      responses:
        '201':
          $ref: '#/components/responses/CommitCreated'
        '200':
          description: Workspace contains no changes to commit
          $ref: '#/components/responses/OKEmpty'
        '412':
          description: Workspace is detached
          $ref: '#/components/responses/PreconditionFailed'
        '409':
          description: Workspace contains conflicts
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Commit Manipulation

  /repos/{repo_id}/workspaces/{workspace_id}/preferences:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
    get:
      operationId: src.handlersv2.workspace.get_preferences
      summary: Get preferences of the current user
      responses:
        '200':
          description: Preferences of the workspace for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspacePreferences'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Repository Workspace Manipulation
    put:
      operationId: src.handlersv2.workspace.set_preferences
      summary: Update the preferences of the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspacePreferences'
      responses:
        '202':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Workspace Manipulation

  /repos/{repo_id}/workspaces/{workspace_id}/other_statuses:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/WorkspaceParam'
      - $ref: '#/components/parameters/PathPrefixParam'
      - $ref: '#/components/parameters/FileEntriesLimit'
    get:
      operationId: src.handlersv2.workspace.get_other_statuses
      summary: Get list of potential clashes with files in other users' workspaces and branches
      responses:
        '200':
          description: By path description of file statuses in other workspaces and branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefsFilesStatus'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Repository Workspace Manipulation

  /repos/{repo_id}/branches:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    post:
      operationId: src.handlersv2.branch.post
      description: Create a branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBranch'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '409':
          description: Branch with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Branch Manipulation
    get:
      operationId: src.handlersv2.branch.list_all
      description: Get a list of all branches in the repo.
      responses:
        '200':
          $ref: '#/components/responses/BranchList'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Branch Manipulation
  /repos/{repo_id}/branches/{branch_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/BranchParam'
    patch:
      operationId: src.handlersv2.branch.patch
      summary: Update a branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commit_id:
                  type: string
                branch_name:
                  type: string
                branch_description:
                  type: string
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        '409':
          description: Branch with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Branch Manipulation
    get:
      operationId: src.handlersv2.branch.get
      summary: Get the current branch details
      responses:
        '200':
          description: Branch details returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Branch Manipulation
    delete:
      operationId: src.handlersv2.branch.delete
      description: Delete a branch
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Branch Manipulation
  /repos/{repo_id}/tags:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.tag.list_all
      summary: Get a list of all tags in the repo.
      responses:
        '200':
          $ref: '#/components/responses/TagList'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Tag Manipulation
    post:
      operationId: src.handlersv2.tag.post
      summary: Create a tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTag'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '409':
          description: Tag with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Tag Manipulation
  /repos/{repo_id}/tags/{tag_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/TagParam'
    get:
      operationId: src.handlersv2.tag.get
      summary: Get tag details
      responses:
        '200':
          description: Tag details returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Tag Manipulation
    patch:
      operationId: src.handlersv2.tag.patch
      summary: Update a tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTag'
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        '409':
          description: Tag with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Tag Manipulation
    delete:
      operationId: src.handlersv2.tag.delete
      summary: Delete a tag
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Tag Manipulation

  /repos/{repo_id}/shelves:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.shelf.list_all
      summary: Get a list of all shelves in the repo.
      parameters:
        - in: query
          name: branch_id
          description: Optional branch id to filter by
          schema:
            type: string
          required: false
      responses:
        '200':
          $ref: '#/components/responses/ShelfList'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Shelves Manipulation
    post:
      operationId: src.handlersv2.shelf.post
      summary: Create a shelf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShelf'
      responses:
        '201':
          description: Shelf details returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shelf'
        '409':
          description: Shelf with the same name already exists
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Shelves Manipulation
  /repos/{repo_id}/shelves/{shelf_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/ShelfIdParam'
    get:
      operationId: src.handlersv2.shelf.get
      summary: Get shelf details
      responses:
        '200':
          description: Shelf details returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shelf'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Shelves Manipulation
    delete:
      operationId: src.handlersv2.shelf.delete
      summary: Delete a shelf
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Shelves Manipulation
  /repos/{repo_id}/shelves/{shelf_id}/apply:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/ShelfIdParam'
    post:
      operationId: src.handlersv2.shelf.apply
      summary: Apply a shelf onto a workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyShelf'
      responses:
        '204':
          description: The merge into a workspace was completed successfully
          $ref: '#/components/responses/OKEmpty'
        '202':
          description: >-
            The merge is in progress.
            It has merge conflicts requiring active input from the user for conflict resolution.
            The response contains a merge ID, which can be used for querying /repos/{repo_id}/merges/{merge_id}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MergeId"
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Shelves Manipulation

  /repos/{repo_id}/trees/{ref_id}:
    get:
      operationId: src.handlersv2.tree.filetree
      summary: Get file tree snapshot. Either one of workspace, branch or commit ID needs to be specified as ref ID.
      parameters:
        - $ref: '#/components/parameters/RepoParam'
        - $ref: '#/components/parameters/RefParam'
        - $ref: '#/components/parameters/FileWalkRecurseParam'
        - $ref: '#/components/parameters/PageSkip'
        - $ref: '#/components/parameters/FileEntriesLimit'
        - $ref: '#/components/parameters/DirOffsetItemName'
        - $ref: '#/components/parameters/IncludeDeletedItemsParam'
        - $ref: '#/components/parameters/WorkspaceJournalOrdinalIdParam'
        - $ref: '#/components/parameters/TreeItemNameQueryParam'
        - $ref: '#/components/parameters/DirsOnlyParam'
      responses:
        '200':
          $ref: '#/components/responses/FileEntryList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
  /repos/{repo_id}/trees/{ref_id}/{path}:
    get:
      operationId: src.handlersv2.tree.filetree_under_path
      summary: Get file tree snapshot for a nested tree path. Either one of workspace, branch or commit ID needs to be specified as ref ID.
      parameters:
        - $ref: '#/components/parameters/RepoParam'
        - $ref: '#/components/parameters/RefParam'
        - $ref: '#/components/parameters/PathParam'
        - $ref: '#/components/parameters/FileWalkRecurseParam'
        - $ref: '#/components/parameters/PageSkip'
        - $ref: '#/components/parameters/FileEntriesLimit'
        - $ref: '#/components/parameters/DirOffsetItemName'
        - $ref: '#/components/parameters/IncludeDeletedItemsParam'
        - $ref: '#/components/parameters/WorkspaceJournalOrdinalIdParam'
        - $ref: '#/components/parameters/DirsOnlyParam'
      responses:
        '200':
          $ref: '#/components/responses/FileEntryList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
  /repos/{repo_id}/files/history/{ref_id}/{path}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/RefParam'
      - $ref: '#/components/parameters/PathParam'
    get:
      operationId: src.handlersv2.commit.get_object_history
      summary: Get object history in a ref by its latest path
      parameters:
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageSkip'
      responses:
        '200':
          $ref: '#/components/responses/FileHistoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
  /repos/{repo_id}/files/{ref_id}/{path}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/RefParam'
      - $ref: '#/components/parameters/PathParam'
    get:
      operationId: src.handlersv2.files.get_file_entry
      summary: Get file entry (either tree or blob). Either one of workspace, branch or commit ID needs to be specified.
      responses:
        '200':
          description: File information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileEntry'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation
    post:
      operationId: src.handlersv2.files.create_or_update_file
      summary: Upload file to a new or existing path
      parameters:
        - $ref: '#/components/parameters/ClientIDParam'
        - $ref: '#/components/parameters/StorageBackendParam'
        - $ref: '#/components/parameters/StorageUriParam'
        - $ref: '#/components/parameters/ModeParam'
        - $ref: '#/components/parameters/MtimeParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SHA1Param'
      requestBody:
        required: false
        description: Blob binary contents, if the file is a blob and if alternative storage solution was not used.
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '202':
          description: File created or updated
        '400':
          description: Path should be normalized
        '412':
          description: Race condition, please attempt the operation again
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - File Mutation
    delete:
      operationId: src.handlersv2.files.delete_file
      summary: Delete a file from an existing path
      parameters:
        - $ref: '#/components/parameters/ClientIDParam'
      responses:
        '202':
          description: File deleted
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - File Mutation
    patch:
      operationId: src.handlersv2.files.move_file
      summary: Move a file to a different path
      parameters:
        - name: new_path
          in: query
          schema:
            type: string
            format: path
            example: /path/to/file
          required: true
          description: The new path to where the file has moved
        - $ref: '#/components/parameters/ClientIDParam'
      responses:
        '202':
          description: File moved
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - File Mutation

  /repos/{repo_id}/blobs/{ref_id}/{path}:
    get:
      operationId: src.handlersv2.files.get_blob
      summary: Get blob contents snapshot. Either one of workspace, branch or commit ID needs to be specified.
      parameters:
        - $ref: '#/components/parameters/RepoParam'
        - $ref: '#/components/parameters/RefParam'
        - $ref: '#/components/parameters/PathParam'
      responses:
        '200':
          description: File contents
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '204':
          $ref: "#/components/responses/CustomRedirect"
      #        Can't define more content-types because of this bug: https://github.com/zalando/connexion/issues/1062
      #        default:
      #          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation

  /repos/{repo_id}/blobs/download:
    get:
      operationId: src.handlersv2.files.download_blob
      summary: Get blob contents using storage information, as retrieved from other APIs.
      parameters:
        - $ref: '#/components/parameters/RepoParam'
        - name: storage_backend
          in: query
          required: true
          description: "Storage type of the blob."
          schema:
            $ref: '#/components/schemas/StorageBackend'
        - name: storage_uri
          in: query
          required: true
          description: "Storage uri of the blob."
          schema:
            $ref: '#/components/schemas/StorageUri'
      responses:
        '200':
          description: File contents
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '204':
          $ref: "#/components/responses/CustomRedirect"
      #        Can't define more content-types because of this bug: https://github.com/zalando/connexion/issues/1062
      #        default:
      #          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Manipulation

  /repos/{repo_id}/blobs/upload:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.files.get_blob_upload_link
      summary: Request an upload link for async blob upload from client side
      parameters:
        - $ref: '#/components/parameters/SHA1Param'
      responses:
        '201':
          description: Upload URL is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobUploadUrl'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - File Mutation

  /repos/{repo_id}/merges/{merge_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/MergeParam'
    get:
      operationId: src.handlersv2.merge.get_open_merge
      summary: Details of a specific merge in progress
      responses:
        '200':
          $ref: '#/components/responses/DetailedMerge'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation
    post:
      operationId: src.handlersv2.merge.finalize
      summary: After all conflicts are resolved, finalizes the merge with a commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitMessage'
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
        '201':
          $ref: '#/components/responses/Created'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation

  /repos/{repo_id}/merges/{merge_id}/close:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/MergeParam'
    post:
      operationId: src.handlersv2.merge.close_merge
      summary: Close an open merge without resolving it
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation
  /repos/{repo_id}/merges/{merge_id}/conflicts/{conflict_id}/accept:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/MergeParam'
      - $ref: '#/components/parameters/ConflictIdParam'
    post:
      operationId: src.handlersv2.merge.accept_side
      summary: Accepts a change from one of the branches (base or other)
      parameters:
        - $ref: '#/components/parameters/ConflictIndexIdParam'
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation
  /repos/{repo_id}/merges/{merge_id}/conflicts/{conflict_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/MergeParam'
      - $ref: '#/components/parameters/ConflictIdParam'
    post:
      operationId: src.handlersv2.merge.set_result
      summary: Update a conflicting file, potentially resolving the conflict.
      parameters:
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SHA1Param'
          description: sha of the contents, to be used in case of async flow
        - $ref: '#/components/parameters/StorageBackendParam'
        - $ref: '#/components/parameters/StorageUriParam'
        - $ref: '#/components/parameters/ModeParam'
          description: Updates the file or tree mode with the given value. Can be used to resolve mode conflicts.
        - in: query
          name: path
          schema:
            type: string
          description: Updates the path of the file with the value passed here. Can be used to resolve path conflicts.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation
  /repos/{repo_id}/merges:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.merge.list_open_merges
      summary: Retrieve conflicted merges in this repo
      parameters:
        - $ref: '#/components/parameters/BaseRefParam'
        - $ref: '#/components/parameters/OtherRefParam'
      responses:
        '200':
          $ref: '#/components/responses/MergeList'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation
    post:
      operationId: src.handlersv2.merge.post
      summary: Merge ref into a branch
      parameters:
        - $ref: '#/components/parameters/BaseRefParam'
          required: true
          description: A branch or workspace ID
        - $ref: '#/components/parameters/OtherRefParam'
          required: true
          description: A commit or branch ID
      responses:
        '200':
          description: Base ref is already up to date with the other ref, no action was made
          $ref: '#/components/responses/OKEmpty'
        '201':
          description: The merge into a branch was completed successfully, and the response contains the new commit ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewResourceId'
        '202':
          description: >-
            The merge is in progress.
            It has merge conflicts requiring active input from the user for conflict resolution.
            The response contains a merge ID, which can be used for querying /repos/{repo_id}/merges/{merge_id}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MergeId"
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Merge Manipulation
  /repos/{repo_id}/revert:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    post:
      operationId: src.handlersv2.revert.revert
      parameters:
        - $ref: '#/components/parameters/BaseRefParam'
          required: true
        - $ref: '#/components/parameters/RevertRefParam'
          required: true
      summary: Revert commit
      description: >
        The operation reverts any changes done in the single commit represented by revert_ref_id (compared to its own parent).
        These opposing changes are then applied into the branch represented by base_id.
        If any changes were done between revert_ref_id and base_id, they will be checked for conflicts with the revert changes.
      responses:
        '200':
          description: The revert was empty
          $ref: '#/components/responses/OKEmpty'
        '201':
          description: The revert was completed successfully, and the response contains the new commit ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewResourceId'
        '202':
          description: >-
            The revert is in progress.
            It has merge conflicts requiring active input from the user for conflict resolution.
            The response contains a merge ID, which can be used for querying /repos/{repo_id}/merges/{merge_id}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MergeId"
      security:
        - OAuth2:
            - coreapi/write
      tags:
        - Repository Commit Manipulation
  /repos/{repo_id}/collaborators:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlers.collaboration.list_collaborators
      description: Get all collaborators and pending invites for repo
      responses:
        '200':
          $ref: '#/components/responses/CollaboratorsList'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Collaborators
  /repos/{repo_id}/collaborators/{user_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/UserIdParam'
    patch:
      operationId: src.handlers.collaboration.update_mode
      description: Change a user's access level to the repo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollaborationRequest'
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Collaborators
    delete:
      operationId: src.handlers.collaboration.revoke_access
      description: Revoke a user's access level to the repo
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Collaborators
  /repos/{repo_id}/invites:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    put:
      operationId: src.handlersv2.invites.create_new
      description: Invite a collaborator to a repository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollaborationInviteRequest'
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Collaborators
  /repos/{repo_id}/invites/{invite_id}:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
      - $ref: '#/components/parameters/InviteIdParam'
    post:
      operationId: src.handlersv2.invites.resend
      description: Resend existing invite
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Collaborators
    delete:
      operationId: src.handlersv2.invites.revoke
      description: Revoke existing invite
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
        default:
          $ref: '#/components/responses/Error'
      security:
        - OAuth2:
            - coreapi/read
        - OAuth2:
            - coreapi/write
      tags:
        - Collaborators
  /repos/{repo_id}/compare:
    parameters:
      - $ref: '#/components/parameters/RepoParam'
    get:
      operationId: src.handlersv2.tree.compare
      summary: Compare two refs (commit/branch/workspace/tag/tree) in this repo
      parameters:
        - in: query
          name: base_id
          description: |
            A workspace_id, branch_id, commit_id or tag_id.
            If omitted, assuming the empty tree, unless other_id is a workspace,
            in which case base_id is assumed to be the workspace base ref.
          schema:
            type: string
            maxLength: 128
            default: ''
        - $ref: '#/components/parameters/OtherRefParam'
      responses:
        '200':
          $ref: '#/components/responses/ComparisonList'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Repository Content Comparison
  /debug/isalive:
    get:
      operationId: src.handlers.debug.is_alive
      summary: Check server is alive
      responses:
        '200':
          $ref: '#/components/responses/OKEmpty'
      tags:
        - Debug
  /support/bundle/upload:
    get:
      operationId: src.handlers.support.get_support_bundle_upload_link
      summary: Get a presigned url that will be used to upload a support bundle
      parameters:
        - in: query
          name: message
          description: A description of the support issue
          schema:
            type: string
            default: ''
      responses:
        '202':
          description: Presigned URL is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUploadUrl'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Support
  /analytics/ingest:
    post:
      operationId: src.handlers.analytics.ingest
      summary: Ingest analytics events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsEvents'
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
      security:
        - OAuth2:
            - coreapi/read
      tags:
        - Analytics
  /analytics/anonymous/ingest:
    post:
      operationId: src.handlers.analytics.ingest_anon
      summary: Ingest analytics events without user context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsEvents'
      responses:
        '204':
          $ref: '#/components/responses/OKEmpty'
      tags:
        - Analytics
  /integrations/github:
    post:
      operationId: src.handlers.integrations.github.handle_github_app_webhook
      summary: An endpoint for Github app installation callbacks
      description: Used for app installation events along with webhooks events used for repo sync.
      responses:
        '202':
          description: Event processed. If needed, a sync was started asynchronously.
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Github App Integration
components:
  securitySchemes:
    OAuth2: # arbitrary name
      type: oauth2
      x-tokenInfoFunc: src.token_info.token_auth
      description: This API uses OAuth 2 with the implicit grant flow
      flows:
        implicit:
          authorizationUrl: https://auth.diversion.dev/oauth2/authorize
          scopes:
            coreapi/read: Operations with no possible side-effects
            coreapi/write: Modifying operations
            coreapi/admin: Organizational operations like adding a repo or changing repo properties
  responses:
    RepoList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Repo ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Repo'
            required:
              - object
              - items
    BranchList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Branch ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Branch'
            required:
              - object
              - items
    WorkspaceList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Workspace ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'
            required:
              - object
              - items
    CommitList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Commit ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Commit'
            required:
              - object
              - items
    FileEntryList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ FileEntry ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/FileEntry'
              workspace_journal_ordinal_id:
                $ref: '#/components/schemas/WorkspaceJournalOrdinalId'
            required:
              - object
              - items
    MergeList:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Merge ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Merge'
            required:
              - object
              - items
    TagList:
      description: A list of tag objects
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Tag ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
            required:
              - object
              - items
    ShelfList:
      description: A list of shelf objects
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ Shelf ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Shelf'
            required:
              - object
              - items
    CollaboratorsList:
      description: A list of collaborators and pending invites
      content:
        application/json:
          schema:
            type: object
            properties:
              collaborators:
                type: array
                items:
                  $ref: '#/components/schemas/Collaborator'
              invites:
                type: array
                items:
                  $ref: '#/components/schemas/CollaborationInvite'
    ComparisonList:
      description: A list of tree comparison objects
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                enum: [ ComparisonItem ]
              items:
                type: array
                items:
                  $ref: '#/components/schemas/ComparisonItem'
              cascaded_changes_count:
                type: integer
                format: int64
                description: Number of cascaded changes, for insight of total compare size
            required:
              - object
              - items
              - cascaded_changes_count
    Error:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The request does not meet the required conditions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PreconditionFailed:
      description: The specified resource is no longer up to date
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    FailedDueToPendingChanges:
      description: Operation failed due to pending changes on the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Created:
      description: Resource created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewResourceId'
    CommitCreated:
      description: Commit created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewCommit'
    OKEmpty:
      description: Request completed successfully
    DetailedMerge:
      description: An object describing the merge.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DetailedMerge'
    ConflicIndex:
      description: An object describing a file version of one side of a merge conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictIndex'
    Commit:
      description: An object describing a commit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Commit'
    CommitsById:
      description: An object describing a mapping of a commit by its ID
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Commit'
    CustomRedirect:
      description: Redirect to file contents
      headers:
        Last-Modified:
          description: HTTP date when the file was last modified
          example: Wed, 21 Oct 2015 07:28:00 GMT
          schema:
            type: string
        Location:
          description: URL to the location of the file
          required: true
          example: https://s3.amazonaws.com/b4bcacbb847681ac9fc372615a2206a4?X-Amz-Algorithm=AWS4-HMAC-SHA256
          schema:
            type: string
        Expires:
          description: HTTP date when the URL expires
          example: Wed, 21 Oct 2015 07:28:00 GMT
          schema:
            type: string
    FileHistoryResponse:
      description: List of changes in the history of a versioned file
      content:
        application/json:
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  $ref: '#/components/schemas/FileHistoryEntry'
            required:
              - entries
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 403
        detail:
          type: string
          example: User not authorized to perform the requested action on the resource
        title:
          type: string
        type:
          type: string
      required:
        - status
        - detail
    NewResourceId:
      type: object
      properties:
        id:
          type: string
          description: The id of the newly created resource
          example: example_id
      required:
        - id
    NewCommit:
      allOf:
        - $ref: '#/components/schemas/NewResourceId'
        - type: object
          properties:
            failed_paths:
              type: array
              nullable: true
              items:
                type: string
              description: A list of paths that were not found/failed to commit
    FileMode:
      type: integer
      description: The file mode (as Unix mode)
      enum: [ 16877, 33188, 33261, 40960 ]
      x-ogen-enum-naming:
        16877: FileMode_TREE
        33188: FileMode_FILE
        33261: FileMode_EXECUTABLE
        40960: FileMode_SYMLINK
    ObjectStatus:
      type: integer
      enum: [ 1, 2, 3, 4 ]
      description: 'One of: 1 - INTACT, 2 - ADDED, 3 - MODIFIED, 4 - DELETED'
      x-ogen-enum-naming:
        1: ObjectStatus_INTACT
        2: ObjectStatus_ADDED
        3: ObjectStatus_MODIFIED
        4: ObjectStatus_DELETED
    FileEntry:
      type: object
      properties:
        path:
          type: string
          example: hello.cc
        prev_path:
          type: string
          description: Optional hint in case the item was renamed or moved
        status:
          $ref: '#/components/schemas/ObjectStatus'
        mode:
          $ref: '#/components/schemas/FileMode'
        mtime:
          type: string
          format: "date-time"
        blob:
          type: object
          properties:
            storage_uri:
              $ref: '#/components/schemas/StorageUri'
            storage_backend:
              $ref: '#/components/schemas/StorageBackend'
            size:
              type: integer
              format: int64
              description: Size in bytes
            sha:
              type: string
          required:
            - storage_uri
            - storage_backend
            - size
            - sha
      required:
        - path
        - status
        - size
        - mode
    JournalEntry:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/FileEntry'
        ordinal_id:
          $ref: '#/components/schemas/WorkspaceJournalOrdinalId'
      required:
        - entry
        - ordinal_id
    BlobUploadUrl:
      type: object
      properties:
        location:
          type: object
          properties:
            storage_backend:
              $ref: '#/components/schemas/StorageBackend'
            storage_uri:
              $ref: '#/components/schemas/StorageUri'
          required:
            - storage_backend
            - storage_uri
        upload_url:
          $ref: "#/components/schemas/PresignedUploadUrl"
      required:
        - location
    PresignedUploadUrl:
      type: object
      properties:
        url:
          type: string
          example: "https://dv-blobs.s3.amazonaws.com/"
        fields:
          type: object
          properties:
            x-amz-checksum-algorithm:
              type: string
              example: 'SHA1'
            key:
              type: string
              example: repo_id/dv.blob.40630485-8f8f-4c34-b102-0072ca53ffba
            x-amz-algorithm:
              type: string
              example: AWS4-HMAC-SHA256
            x-amz-credential:
              type: string
              example: AKAKI6PFK43K4U6ASQ3V2/11111111/eu-central-1/s3/aws4_request
            x-amz-date:
              type: string
              example: 20221130T095258Z
            policy:
              type: string
              example: eyJleHBpcmF0aW9uIjogIjIwMjItMTEtMzBUMTA6NTI6NThaIiwgImNvbmRpdGlvbnMiOiBbeyJ4LWFtei1jaGVja3N1bS1hbGdvcml0aG0iOiAiU0hBMSJ9LCB7ImJ1Y2tldCI6ICJkdi1ibG9icyJ9LCB7ImtleSI6ICJyZXBvX2lkL2R2LmJsb2IuNDA2MzA0ODUtOGY4Zi00YzM0LWIxMDItMDA3MmNhNTNmZmJhIn0sIHsieC1hbXotYWx
            x-amz-signature:
              type: string
              example: bc50d66096b27eb2bc4855ef59748f8dfba896529b11480daaa594097fc46713
      required:
        - url
        - fields
    CommitId:
      type: object
      properties:
        commit_id:
          type: string
          example: example_id
          minLength: 3
          maxLength: 128
      required:
        - commit_id
    Commit:
      allOf:
        - $ref: '#/components/schemas/CommitId'
        - type: object
          properties:
            created_ts:
              type: integer
              description: Seconds since epoch UTC
              format: int64
            commit_message:
              type: string
            branch_id:
              type: string
              description: The branch on which this commit was created
            author:
              $ref: '#/components/schemas/User'
              description: Details of the user who added the commit
            parents:
              type: array
              description: List of parent commits of this commit
              items:
                type: string
          required:
            - created_ts
            - branch_id
            - author
            - parents
    CommitRequest:
      allOf:
        - $ref: '#/components/schemas/CommitMessage'
        - type: object
          description: Inclusion list of modified paths to commit. Other modifications will not be committed. If no list is provided, all modifications will be included.
          properties:
            include_paths:
              $ref: '#/components/schemas/PathsList'
    CommitMessage:
      type: object
      properties:
        commit_message:
          type: string
      required:
        - commit_message
    Collaborator:
      type: object
      properties:
        collaboration_id:
          type: string
        user_id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        access_mode:
          $ref: '#/components/schemas/AccessMode'
      required:
        - collaboration_id
        - user_id
        - access_mode
    CollaborationInvite:
      type: object
      properties:
        invite_id:
          type: integer
          example: 17
        inviting_user_id:
          type: string
        invited_email:
          type: string
          format: email
        access_mode:
          $ref: '#/components/schemas/AccessMode'
        created:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
      required:
        - invite_id
        - inviting_user_id
        - invited_email
        - access_mode
        - created
        - expires
    CollaborationInviteRequest:
      type: object
      properties:
        collaborator_handle:
          type: string
          example: user@domain.com
          minLength: 3
          maxLength: 255
          description: >
            A user ID or email. User IDs are preferred, but an email can be used to invite a new collaborator who does not
            have an account or whose user ID is unknown.
        mode:
          $ref: '#/components/schemas/AccessMode'
      required:
        - collaborator_handle
        - mode
    CollaborationRequest:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/AccessMode'
      required:
        - mode
    AccessMode:
      type: string
      enum: [ READ, WRITE, ADMIN, OWNER ]
    NewBranch:
      allOf:
        - $ref: '#/components/schemas/CommitId'
        - type: object
          properties:
            branch_name:
              type: string
              example: new-branch-name
              minLength: 1
              maxLength: 128
            branch_description:
              type: string
              example: 'A description of the branch'
          required:
            - branch_name
    NewWorkspace:
      type: object
      properties:
        branch_id:
          type: string
        name:
          type: string
        commit_id:
          type: string
          example: example_id
          minLength: 3
          maxLength: 128
    WorkspaceRename:
      type: object
      description: Properties to modify in an existing workspace
      properties:
        name:
          type: string
          description: A name to set for the workspace
          minLength: 1
      required:
        - name
    WorkspaceCheckout:
      type: object
      description: Properties to modify in an existing workspace
      properties:
        ref_id:
          type: string
          description: A branch or commit ID to point the workspace onto
      required:
        - ref_id
    WorkspacePreferences:
      type: object
      description: Preferences associated with a user for a workspace
      properties:
        sync_paths_rules:
          description: List of rules setting which paths to sync, an empty list means sync all
          type: array
          items:
            type: string
      required:
        - sync_paths_rules
    RefsFilesStatus:
      type: object
      description: Status of files in multiple refs
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/RefsFileStatus'
      required:
        - statuses
    RefsFileStatus:
      type: object
      description: Status of a file in multiple refs
      properties:
        path:
          description: File path
          type: string
        file_statuses:
          description: Details of changes of the file per relevant workspace
          type: array
          items:
            $ref: '#/components/schemas/RefFileStatus'
      required:
        - path
        - file_statuses
    RefFileStatus:
      type: object
      description: Changes on some file in some ref
      properties:
        workspace_id:
          description: ID of the workspace, if applicable
          type: string
        commit_id:
          description: ID of the commit the ref is based on
          type: string
        branch_id:
          description: ID of the branch or of the branch on which the workspace is based on, if applicable
          type: string
        branch_name:
          description: Name of the branch, if applicable
          type: string
        status:
          $ref: '#/components/schemas/ObjectStatus'
        author:
          $ref: '#/components/schemas/User'
        mtime:
          type: integer
          description: Seconds since epoch UTC
          format: int64
      required:
        - commit_id
        - status
        - author
    Branch:
      allOf:
        - $ref: '#/components/schemas/NewBranch'
        - type: object
          properties:
            branch_id:
              description: Branch identifier in Diversion
              type: string
            author:
              $ref: '#/components/schemas/User'
            time:
              description: Creation time
              type: number
              format: int64
          required:
            - branch_id
            - author
            - time
    Tag:
      allOf:
        - $ref: '#/components/schemas/CreateTag'
        - type: object
          properties:
            id:
              description: Tag identifier in Diversion
              type: string
            author:
              $ref: '#/components/schemas/User'
            time:
              description: Creation time
              type: number
              format: int64
          required:
            - id
            - author
            - time
    CreateTag:
      type: object
      properties:
        name:
          description: Display name of the tag
          type: string
        commit_id:
          description: Commit ID that the tag references
          type: string
        description:
          description: More information about the tag
          type: string
      required:
        - name
        - commit_id
    ModifyTag:
      type: object
      properties:
        name:
          description: Display name of the tag
          type: string
        description:
          description: More information about the tag
          type: string
        commit_id:
          description: Commit ID that the tag references
          type: string
    Shelf:
      type: object
      properties:
        id:
          description: Shelf identifier in Diversion
          type: string
        name:
          description: Display name of the shelf
          type: string
        created_timestamp:
          type: integer
          description: Seconds since epoch UTC
          format: int64
        branch_id:
          description: Optional branch ID from which the changes were shelved
          type: string
      required:
        - id
        - name
        - created_timestamp
    CreateShelf:
      type: object
      properties:
        name:
          description: Display name of the shelf
          type: string
        workspace_id:
          description: Workspace ID from which to shelve changes
          type: string
        reset_workspace:
          description: Should reset workspace changes after creating the shelf
          type: boolean
          default: true
      required:
        - name
        - workspace_id
    ApplyShelf:
      type: object
      properties:
        workspace_id:
          description: Workspace ID on which to apply the shelved changes
          type: string
        delete_shelf:
          description: Should shelf be deleted after applying it
          type: boolean
          default: false
      required:
        - workspace_id
    NewRepo:
      type: object
      properties:
        repo_name:
          type: string
          example: repo-name
          minLength: 1
          maxLength: 128
        description:
          type: string
      required:
        - repo_name
    Repo:
      allOf:
        - $ref: "#/components/schemas/NewRepo"
        - type: object
          properties:
            repo_id:
              type: string
              example: example_id
            default_branch_id:
              type: string
            default_branch_name:
              type: string
            size_bytes:
              type: number
              format: float
            owner_user_id:
              type: string
            created_timestamp:
              type: integer
              description: Seconds since epoch UTC
              format: int64
            sync_git_repo_url:
              type: string
              description: Optional URL of the git repository being synced with the repo
          required:
            - repo_name
            - repo_id
            - size_bytes
            - owner_user_id
            - created_timestamp
    Workspace:
      type: object
      properties:
        workspace_id:
          type: string
        name:
          type: string
          maxLength: 128
        source_commit:
          type: string
        branch_id:
          type: string
        base_commit_id:
          type: string
        repo_id:
          type: string
        journal_ordinal_id:
          $ref: '#/components/schemas/WorkspaceJournalOrdinalId'
      required:
        - workspace_id
        - base_commit_id
        - repo_id
        - journal_ordinal_id
    WorkspaceJournalOrdinalId:
      type: integer
      format: uint64
      description: An ordinal ID of a workspace journal entry
    MergeId:
      type: object
      properties:
        merge_id:
          type: string
          example: example_id
          minLength: 3
          maxLength: 128
      required:
        - merge_id
    Conflict:
      type: object
      properties:
        conflict_id:
          type: string
        is_resolved:
          type: boolean
        base:
          $ref: "#/components/schemas/ConflictIndex"
        other:
          $ref: "#/components/schemas/ConflictIndex"
        result:
          $ref: "#/components/schemas/ConflictIndex"
      required:
        - conflict_id
        - is_resolved
        - base
        - other
    ConflictIndex:
      type: object
      description: >
        A index in a conflict, could be representing either "base", "other" or "result".
        If the index does not represent "result", then all properties besides "prev_path" can be considered 'required'.
      required:
        - conflict_index_id
        - file_mode
        - path
        - type
      properties:
        conflict_index_id:
          type: string
          enum: [ RESULT, BASE, OTHER ]
        file_mode:
          $ref: '#/components/schemas/FileMode'
        path:
          type: string
        prev_path:
          type: string
        type:
          $ref: '#/components/schemas/ObjectStatus'
    CustomRedirectResponse:
      description: A redirect that needs to be followed in a different HTTP context than the original request.
      type: object
      properties:
        result_url:
          type: string
        timeout_sec:
          type: integer
      required:
        - result_url
        - timeout_sec
    AsyncResponse:
      description: Response with the location of the result of an asynchronous processing of the request
      allOf:
        - $ref: "#/components/schemas/CustomRedirectResponse"
        - type: object
          properties:
            status:
              type: integer
            ref_id:
              type: string
            poll_interval_sec:
              type: integer
          required:
            - status
            - ref_id
    WorkspaceStatus:
      description: >
        The status of the workspace, meaning its bill of changes.
        It will contain the total number of changed items and specifically changed files.
        If paths details were requested, it will also contain an object having 'new', 'modified', 'deleted' arrays of file entries, sorted lexicographically.
      type: object
      properties:
        changed_items_count:
          type: number
          description: Number of changed items of all types
        changed_files_count:
          type: number
          description: Number of changed files
        incomplete_result:
          type: boolean
          description: The result list was trimmed and the counts are a lower bound only
        items:
          type: object
          description: Drill down into modified items by change type
          properties:
            new:
              type: array
              items:
                $ref: '#/components/schemas/FileEntry'
            modified:
              type: array
              items:
                $ref: '#/components/schemas/FileEntry'
            deleted:
              type: array
              items:
                $ref: '#/components/schemas/FileEntry'
          required:
            - new
            - modified
            - deleted
        conflicts:
          type: array
          nullable: true
          description: List of conflicted file paths, compared to the base branch, if applicable
          items:
            type: string
      required:
        - changed_items_count
        - changed_files_count
    WorkspaceUpdates:
      description: A list of modification operations done on the workspace.
      type: object
      properties:
        journal:
          type: array
          items:
            $ref: '#/components/schemas/JournalEntry'
        commit_id:
          type: string
          description: Latest commit the workspace is checkout out on
        branch_id:
          type: string
          description: Which branch the workspace is checked out on, or none if detached
        base_commit_id:
          type: string
          description: The commit ID the workspace is based on, whether checket out on branch or commit
        incomplete_response:
          type: boolean
          description: More results are available, call the endpoint again with the latest revision from this response
      required:
        - journal
        - base_commit_id
        - incomplete_response
    ResetStatus:
      description: Response of a reset command.
      type: object
      properties:
        success:
          description: Paths that were successfully reset.
          type: array
          items:
            type: string
        fail:
          description: Paths that were not found.
          type: array
          items:
            type: string
      required:
        - success
        - fail
    Merge:
      description: Describes a merge in progress with conflicts
      type: object
      properties:
        id:
          type: string
        repo_id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        base_ref:
          type: string
        base_commit:
          type: string
        other_ref:
          type: string
        other_commit:
          type: string
        ancestor_commit:
          type: string
      required:
        - id
        - repo_id
        - user
        - base_ref
        - base_commit
        - other_ref
        - other_commit
        - ancestor_commit
    DetailedMerge:
      allOf:
        - $ref: '#/components/schemas/Merge'
        - type: object
          properties:
            conflicts:
              type: array
              items:
                $ref: '#/components/schemas/Conflict'
          required:
            - conflicts
    ComparisonItem:
      description: Describes a comparison result at a single path. At least one of base/other items must be present.
      type: object
      properties:
        base_item:
          $ref: '#/components/schemas/FileEntry'
        other_item:
          $ref: '#/components/schemas/FileEntry'
        status:
          $ref: '#/components/schemas/ObjectStatus'
      required:
        - status
    User:
      description: User details
      type: object
      properties:
        image:
          type: string
          description: URL of the user image
        email:
          type: string
          format: email
        full_name:
          type: string
        id:
          type: string
        name:
          type: string
      required:
        - id
    FileHistoryEntry:
      description: A change in the history of a versioned item along with the relevant commit
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/FileEntry'
        commit:
          $ref: '#/components/schemas/Commit'
      required:
        - entry
        - commit
    GitRepoImport:
      description: Details of a git repo to import into Diversion
      type: object
      properties:
        git_url:
          description: URL to the git repo. May be omitted if repo_id already has it set.
          type: string
    AnalyticsEvents:
      description: A list of analytics events
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticsEvent'
      required:
        - events
    AnalyticsEvent:
      description: An analytics event
      type: object
      properties:
        event:
          type: string
          description: Event name
        source:
          type: string
          description: Event source
        time:
          type: string
          format: date-time
        properties:
          type: object
          additionalProperties:
            type: string
      required:
        - event
        - source
        - time
        - properties
    StorageBackend:
      type: integer
      enum: [ 1, 2 ]
      description: "One of: 1 - EFS, 2 - S3"
      x-ogen-enum-naming:
        1: StorageBackend_EFS
        2: StorageBackend_S3
    StorageUri:
      type: string
      description: "Coupled with storage_backend, a uri to storage location"
      example: "repo_id/2aae6c35c94fcfb415dbe95f408b9ce91ee846ed"
    PathsList:
      description: Inclusion list of paths to include in the operation. If null, all paths will be included.
      type: array
      nullable: true
      minItems: 1
      items:
        type: string
        description: A relative path to a file or directory inside the repository.
        minLength: 1
  parameters:
    OwnerParam:
      in: path
      name: owner_id
      required: true
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      description: >
        The owner ID of the repository, either organization or user. Owner _name_ can be used instead of the ID, but
        usage of ID for permanent link storage and API requests is preferred.
    InviteIdParam:
      in: path
      name: invite_id
      required: true
      schema:
        type: integer
        example: 17
      description: >
        Invite ID, as returned by a previous call
    CollaboratorParam:
      in: path
      name: collaborator_handle
      required: true
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 255
      description: >
        A user ID or email. User IDs are preferred, but an email can be used to invite a new collaborator who does not
        have an account or whose user ID is unknown.
    RepoParam:
      in: path
      name: repo_id
      required: true
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      description: >-
        The repo ID of the repository. Repo _name_ can be used instead of the ID, but
        usage of ID for permanent linking and API requests is preferred.
    WorkspaceParam:
      in: path
      name: workspace_id
      required: true
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      description: >-
        The repo ID of the workspace.
    BranchParam:
      in: path
      name: branch_id
      description: >-
        Branch ID. Branch _name_ can be used instead of the ID, but storing and using branch ID in API requests
        is preferred.
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      required: true
    TagParam:
      in: path
      name: tag_id
      description: Tag identifier
      schema:
        type: string
        example: dv.tag.12a37e91-bfc4-4e03-a330-13b5b84ab7cb
        minLength: 3
        maxLength: 128
      required: true
    ShelfIdParam:
      in: path
      name: shelf_id
      description: Shelf identifier
      schema:
        type: string
        example: dv.shelf.12a37e91-bfc4-4e03-a330-13b5b84ab7cb
        minLength: 3
        maxLength: 128
      required: true
    BaseRefParam:
      in: query
      name: base_id
      description: >-
        A reference to a base unto which changes will be applied
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
    OtherRefParam:
      in: query
      name: other_id
      description: >-
        A reference to a source version from which changes will be taken
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
    RevertRefParam:
      in: query
      name: revert_ref_id
      description: >-
        A reference to a source version to revert, currently only commit ID is supported
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
    RefParam:
      in: path
      name: ref_id
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      required: true
      description: An ID of a workspace, branch or commit.
    PathParam:
      in: path
      name: path
      schema:
        type: string
        format: path
        example: /path/to/file
      required: true
      description: A path to a file inside the repository.
    ConflictIdParam:
      in: path
      required: true
      name: conflict_id
      schema:
        type: string
      description: An identifier of a conflict retrieved in conflicts property of GET /repos/{repo_id}/merges/{merge_id}
    ConflictIndexIdParam:
      in: query
      required: true
      name: index_id
      schema:
        type: string
      description: An identifier of a conflict index retrieved in conflicts property of GET /repos/{repo_id}/merges/{merge_id}
    MtimeParam:
      in: query
      name: mtime
      description: The file's modification time in seconds since epoch
      required: true
      schema:
        type: integer
        format: int64
    ModeParam:
      in: query
      name: mode
      description: The file mode (as Unix mode)
      required: true
      schema:
        $ref: '#/components/schemas/FileMode'
    UserIdParam:
      in: path
      name: user_id
      schema:
        type: string
        example: Google_1192874509253
        minLength: 3
      required: true
      description: A user's ID
    MergeParam:
      in: path
      name: merge_id
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      required: true
      description: An ID of a merge attempt
    ClientIDParam:
      in: header
      name: X-DV-Client-ID
      description: The unique id of the client making this request
      required: true
      schema:
        type: string
    CommitParam:
      in: path
      name: commit_id
      schema:
        type: string
        example: dv.commit.350e1bc3-52dc-4659-9817-7ce8f3fdf628
        minLength: 3
        maxLength: 128
      required: true
      description: A commit ID
    ObjectIdParam:
      in: path
      name: object_id
      schema:
        type: string
        example: example_id
        minLength: 3
        maxLength: 128
      required: true
      description: An ID of a versioned item
    StorageBackendParam:
      in: query
      name: storage_backend
      description: "An optional storage type for async upload."
      schema:
        $ref: '#/components/schemas/StorageBackend'
    StorageUriParam:
      in: query
      name: storage_uri
      description: "An optional storage uri to be sent along storage_backend."
      schema:
        $ref: '#/components/schemas/StorageUri'
    SizeParam:
      in: query
      name: size
      description: "Blob size in bytes"
      schema:
        type: integer
        format: int64
    SHA1Param:
      in: query
      name: sha1
      description: "A sha1 hexdigest"
      example: 7d76d48d64d7ac5411d714a4bb83f37e3e5b8df6
      schema:
        type: string
    FileWalkRecurseParam:
      in: query
      name: recurse
      schema:
        type: boolean
        default: true
      description: Specifies if to recursively iterate file tree to next directory levels
    FileEntriesLimit:
      in: query
      name: limit
      schema:
        type: integer
        example: 17
        minimum: 1
      description: Limit the number of entries returned from walk
    DirOffsetItemName:
      in: query
      name: offset
      schema:
        type: string
        example: file.ext
      description: Offset item name in directory when iterating its entries (non-inclusive)
    WorkspaceJournalOrdinalIdParam:
      in: query
      name: workspace_journal_ordinal_id
      schema:
        $ref: '#/components/schemas/WorkspaceJournalOrdinalId'
      description: The ordinal ID of the journal entry the walk references, if applicable
    TreeItemNameQueryParam:
      in: query
      name: item_name_query
      schema:
        type: string
        example: abcd
        minLength: 3
        maxLength: 32
      description: A query string to test against item name, only matching items will be collected
    IncludeDeletedItemsParam:
      in: query
      name: include_deleted
      schema:
        type: boolean
        default: false
      description: Should the tree contain also deleted items or omit them from response
    DetailWorkspaceStatusItems:
      in: query
      name: detail_items
      schema:
        type: boolean
        default: true
      description: Should detail all the changed items in status response
    PageLimit:
      in: query
      name: limit
      schema:
        type: integer
        example: 17
        minimum: 1
        default: 100
      description: Limit the number or items returned from a listing api
    PageSkip:
      in: query
      name: skip
      schema:
        type: integer
        example: 17
        minimum: 0
      description: Skip a number of items returned from a listing api
    PageQuery:
      in: query
      name: query
      schema:
        type: string
        example: "foo"
        minLength: 3
        maxLength: 64
      description: A string query to filter against in a listing api
    PathPrefixParam:
      in: query
      name: path_prefix
      schema:
        type: string
        format: path
        example: path/to/file
      description: A path prefix in the file tree to walk under
    DirsOnlyParam:
      in: query
      name: dirs_only
      schema:
        type: boolean
        default: false
      description: Return only directories in the file tree walk
